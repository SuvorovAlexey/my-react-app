{"version":3,"sources":["CommentItem.js","InputForm.js","App.js","serviceWorker.js","index.js"],"names":["styles","li","listStyleType","display","justifyContent","marginTop","borderBottom","button","borderRadius","border","backgroundColor","CommentItem","props","className","man","style","name","title","date","onClick","deleteComment","form","input","width","height","input2","label","button2","InputForm","state","getDefaultState","handleChange","bind","handleSubmit","boy","girl","comment","event","target","value","type","checked","this","setState","preventDefault","addComment","onSubmit","id","placeholder","onChange","React","Component","App","newInfo","localStorage","getItem","jsonObject","JSON","parse","comments","d","Date","getDate","month","getMonth","year","getFullYear","document","getElementById","woman","newObj","push","alert","pop","jsonString","stringify","setItem","key","splice","map","component","i","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa57ca97.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst styles = {\r\n  li: {\r\n    listStyleType: 'none',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    marginTop: '10px',\r\n    borderBottom: '1px solid black'\r\n  },\r\n  button: {\r\n    borderRadius: '15px',\r\n    border: 'none',\r\n    backgroundColor: 'white'\r\n  }\r\n}\r\n\r\n//Функциональный компонент. Дочернему компоненту не нужно собственное состояние.\r\nconst CommentItem = (props) => {          //через props компонент получает данные от app.js которые будет обрабатывать\r\n  const className = props.man ? 'man' : 'woman';\r\n\r\n  return(\r\n    <li\r\n      className={className}\r\n      style={styles.li}\r\n    >\r\n      {props.name + \" говорит: \" + props.title}\r\n      {props.date}\r\n\r\n      <button\r\n      style={styles.button}\r\n        onClick={props.deleteComment}\r\n      >\r\n        &#10008;\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default CommentItem\r\n","import React from 'react';\r\n\r\nconst styles = {\r\n  form: {\r\n    display: 'block',\r\n    marginTop: '50px'\r\n\r\n  },\r\n  input: {\r\n    display: 'block',\r\n    marginTop: '50px',\r\n    width: '450px',\r\n    height: '25px',\r\n    border: '3px solid black'\r\n  },\r\n  input2: {\r\n    display: 'block',\r\n    marginTop: '10px',\r\n    height: '25px',\r\n    border: '3px solid black'\r\n  },\r\n  label: {\r\n    display: 'block',\r\n    marginTop: '50px'\r\n  },\r\n  button2: {\r\n    display: 'block',\r\n    marginTop: '25px',\r\n    borderRadius: '25px',\r\n    border: 'none',\r\n    height: '30px',\r\n    width: '130px'\r\n  }\r\n}\r\n\r\nclass InputForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.getDefaultState(); //говорим что начальный стейт мы получим из функции getDefaultState()\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  getDefaultState() { //функция с заданным НАЧАЛЬНЫМ стейтом для элементов InputForm\r\n    return {\r\n      boy: false, //Начальное значение чекбокса \"мужчина\"\r\n      girl: false,  //Начальное значение чекбокса \"мужчина\"\r\n      comment: '', //Начальное значение комментария\r\n      name: '' //Начальное значение имени\r\n    };\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target; //event.target - это элемент, на котором произошло событие\r\n    const value = target.type === 'checkbox' ? target.checked : target.value; //если элемент на котором произошло событие это 'checkbox', то тогода для него checked (выбран), иначе - value\r\n    const name = target.name;\r\n\r\n    this.setState({ //тут устанавливаем значение, которое будет в полях в момент ввода текста\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    // Далее - валидация элементов. Внутри компонента самой формы. Убрал, для читаемости\r\n    // Какая тут будет валидация? Она же происходит внутри функции addComment( ), которая в компоненте app.js\r\n\r\n    this.props.addComment({  //функция по добавлению коммента в список\r\n      ...this.state  // \"...\" - это же Spread/Rest оператор? Что в этом случае он разбивает или собирает?\r\n    });\r\n\r\n    this.setState( this.getDefaultState() );\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n        <form style={styles.form} onSubmit={this.handleSubmit}>\r\n          <input\r\n              style = {styles.input}\r\n              id = 'inputKomment'\r\n              placeholder = \"Введите комментарий\"\r\n              name=\"comment\"\r\n              value={this.state.comment}\r\n              onChange={this.handleChange}\r\n          />\r\n          <input\r\n              style = {styles.input2}\r\n              id = 'inputName'\r\n              placeholder = \"Введите имя\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n          />\r\n\r\n          <label style={styles.form}>\r\n            <input\r\n                type = 'checkbox'\r\n                id = 'boy'\r\n                name = 'boy'\r\n                checked={this.state.boy}\r\n                onChange={this.handleChange}\r\n            />\r\n            Я мужчина\r\n          </label>\r\n\r\n          <label>\r\n            <input type = 'checkbox'\r\n                   id = 'girl'\r\n                   name = 'girl'\r\n                   checked={this.state.girl}\r\n                   onChange={this.handleChange}\r\n            />\r\n            Я женщина\r\n          </label>\r\n\r\n          <button\r\n              type=\"submit\"\r\n              style={styles.button2}\r\n          > Добавить </button>\r\n\r\n        </form>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default InputForm\r\n","import React from 'react';\nimport './App.css';\nimport CommentItem from './CommentItem'\nimport InputForm from './InputForm'\n\n\n//обозначили переменной получение контекста из localstorage\n\n\n//запускаем наш основной компонент App (в виде классового компонента)\nclass App extends React.Component {\n\n  constructor(){\n    super();\n\n    let newInfo = localStorage.getItem('newContent');\n\n    let jsonObject = JSON.parse(newInfo);\n\n    //исходное состояние\n    this.state = {\n      comments: [\n        {name: 'Иван', title: 'Я пишу первый комментарий', man: true , date: ' (11.02.2018)'},\n        {name: 'Ирина', title: 'А я пишу уже второй комментарий', man: false, date: ' (13.05.2019)'},\n        {name: 'Михаил', title: 'А я - третий комментарий', man: true, date: ' (01.01.2020)'}\n      ]\n    }\n\n    if (!(newInfo == null)) {\n      this.state = {\n        comments: jsonObject\n      }\n    }\n\n  }\n\n\n\n  addComment(event) {\n\n    //отменяем действие по умолчанию(отправка формы)\n\n    //добавляем определение даты\n    let d = new Date();\n    let date = d.getDate();\n    let month = d.getMonth() +1;\n    let year = d.getFullYear();\n\n    const comments = this.state.comments\n\n    let man = document.getElementById('boy');\n    let woman = document.getElementById('girl');\n\n    let newObj = {\n      name: document.getElementById(\"inputName\").value,\n      title: document.getElementById(\"inputKomment\").value,\n      date: '  (' + date + '.' + month + '.' + year + ')'\n    }\n\n    if (man.checked) {\n      newObj.man = true\n    }\n\n    if (woman.checked) {\n      newObj.man = false\n    }\n\n    comments.push(newObj);\n\n    if ((newObj.name == '' || newObj.title == '') && ((man.checked && woman.checked) || (!man.checked && !woman.checked))) {\n      alert('Не введено никаких данных!')\n      comments.push('')\n    }\n\n    if (newObj.name == '' || newObj.title == '') {\n      alert('Не введен комментарий или имя!')\n      delete comments.pop()\n    }\n\n    if ((man.checked && woman.checked) || (!man.checked && !woman.checked)) {\n      alert('Определитесь кто Вы...')\n      delete comments.pop()\n    }\n\n    let jsonString = JSON.stringify(comments)\n\n    localStorage.setItem('newContent', jsonString);\n\n    //if (!(newObj.name == '') || !(newObj.title == '')) {\n      //document.getElementById(\"inputName\").value = ''\n      //document.getElementById(\"inputKomment\").value = ''\n    //}\n\n    this.setState( {comments} )\n  }\n\n\n  deleteComment(key) {\n    const comments = this.state.comments\n\n    comments.splice(key, 1);\n\n    let jsonString = JSON.stringify(comments)\n\n    localStorage.setItem('newContent', jsonString);\n\n    this.setState( {comments} )\n  }\n\n\n  render() {\n    return (\n      <div className='wrapper'>\n\n        {this.state.comments.map((component, i) => {\n          return(\n            <CommentItem\n              key={i}\n              name={component.name}\n              title={component.title}\n              date={component.date}\n              man={component.man}\n              deleteComment={this.deleteComment.bind(this, i)}\n            />\n          )\n        })}\n\n        <InputForm\n          addComment={this.addComment.bind(this)}\n        />\n\n        <div className='lastline'> Данное приложение создано на React. Оно работает с LocalStorage. Вы можете закрыть вкладку или браузер, сохраненные комментарии останутся в приложении...\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}